<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ output extension=".Generated.cs" #>
<#@ assembly name="System.Core, Version=4.0.0.0, Culture=neutral" #>
<#@ Assembly Name="Microsoft.CSharp, Version=4.0.0.0, Culture=neutral" #>
<#@ import namespace="System.Linq.Expressions" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Threading" #>
<#@ import namespace="System.Globalization" #>
<#
var orgUICulture = Thread.CurrentThread.CurrentUICulture;
Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en");
try
{
#>
using System;
using System.Linq.Expressions;
using System.Collections.Generic;

namespace PowerAssert.Infrastructure
{
    internal class Util
    {
	    internal static readonly Dictionary<Type, string> Aliases = new Dictionary<Type, string>()
        {
            { typeof(byte), "byte" },
            { typeof(sbyte), "sbyte" },
            { typeof(short), "short" },
            { typeof(ushort), "ushort" },
            { typeof(int), "int" },
            { typeof(uint), "uint" },
            { typeof(long), "long" },
            { typeof(ulong), "ulong" },
            { typeof(float), "float" },
            { typeof(double), "double" },
            { typeof(decimal), "decimal" },
            { typeof(object), "object" },
            { typeof(string), "string" },
            { typeof(bool), "bool" },
            { typeof(void), "void" },
        };

        internal static Dictionary<ExpressionType, string> BinaryOperators = new Dictionary<ExpressionType, string>
        {
            {ExpressionType.AndAlso, "&&"},
            {ExpressionType.OrElse, "||"},
<# 
foreach (var v in Enum.GetValues(typeof (ExpressionType)))
{
    try
    {
        string s = GetBinaryFormat((ExpressionType) v);
#>
            {ExpressionType.<#=v #>, "<#=s #>"},
<#
    }
    catch (Exception e)
    {
#>
			// <#=v #>: <#=Regex.Replace(e.Message, "\\s", " ") #>
<#
    }
} 
#>
        };

		internal static Dictionary<ExpressionType, string> UnaryOperators = new Dictionary<ExpressionType, string>
        {
<# 
foreach (var v in Enum.GetValues(typeof (ExpressionType)))
{
    try
    {
        string s = GetUnaryFormat((ExpressionType) v);
#>
            {ExpressionType.<#=v #>, "<#=s #>"},
<#
    }
    catch (Exception e)
    {
#>
			// <#=v #>: <#=Regex.Replace(e.Message, "\\s", " ") #>
<#
    }
} 
#>
        };
    }
}
<#
}
finally
{
    Thread.CurrentThread.CurrentUICulture = orgUICulture;
}
#>

<#+

    string GetBinaryFormat(ExpressionType v)
    {
        var lastRaised = new InvalidOperationException("Unknown error");
        foreach (var t in new [] {typeof(int), typeof(double), typeof(string)})
        {
            try
            {
                return GetBinaryFormat(v, t);
            }
            catch (InvalidOperationException ex)
            {
                lastRaised = ex;
            }
        }
        throw lastRaised;
    }

    string GetBinaryFormat(ExpressionType v, Type t)
    {
        return "" + Expression.MakeBinary(v, Expression.Variable(t, "x"), Expression.Variable(t, "x")).ToString().Trim("x()0 ".ToCharArray());
    }

    string GetUnaryFormat(ExpressionType v)
    {
        return "" + Expression.MakeUnary(v, Expression.Variable(typeof (double), "x"), typeof (double)).ToString().Trim("x()0 ".ToCharArray());
    }

#>